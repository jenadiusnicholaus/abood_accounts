"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import pymysql
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


pymysql.install_as_MySQLdb()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "192.168.1.181",
    "localhost",
    "127.0.0.1",
    "trophyapi.japango.co.tz",
    "accounts.japango.co.tz",
    "trophyfront.japango.co.tz",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "accounts",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "settings.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "settings.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": config("DATABASE_NAME"),
        "USER": config("DATABASE_USER"),
        "PASSWORD": config("DATABASE_PASSWORD"),
        "HOST": config("DATABASE_HOST"),
        "PORT": config("DATABASE_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
STATIC_ROOT = os.path.join(BASE_DIR, "static/")


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication",
        # "rest_framework.authentication.SessionAuthentication",  # <-- set this class
    ),
}

API_VERSION = "v1.0"

ACCOUNT_GROUP_CHOICES = (
    ("CASH_IN_HAND", "CASH IN HAND"),
    ("BANK", "BANK"),
    ("TRADE_DEBTORS", "TRADE DEBTORS"),
    ("TRADE_CREDITORS", "TRADE CREDITORS"),
    ("DIRECT_EXPENSES", "DIRECT EXPENSES"),
    ("INDIRECT_EXPENSES", "INDIRECT EXPENSES"),
    ("INVENTORY", "INVENTORY"),
    (
        "MAINTENANCE_EXPENSES_HUNTING_VEHICLES",
        "MAINTENANCE EXPENSES, HUNTING VEHICLES",
    ),
    ("INCOME_TAX", "INCOME TAX"),
    ("ACCOUNTS_RECEIVABLES", "ACCOUNTS RECEIVABLES"),
    ("PREPAID_EXPENSES", "PREPAID EXPENSES"),
    (
        "MAINTENANCE_EXPENSES_OTHER_VEHICLES_EQUIPMENT",
        "MAINTENANCE EXPENSES, OTHER VEHICLES & EQUIPMENT",
    ),
    ("PAYROLL_EXPENSES", "PAYROLL EXPENSES"),
    ("ADMINISTRATIVE_EXPENSES", "ADMINISTRATIVE EXPENSES"),
    ("ACCOUNTS_PAYABLE", "ACCOUNTS PAYABLE"),
)


SUB_ACCOUNT_NAMES_CHOICES = (
    ("CASH_IN_HAND", "CASH IN HAND"),
    ("BANK", "BANK"),
    ("TRADE_DEBTORS", "TRADE DEBTORS"),
    ("TRADE_CREDITORS", "TRADE CREDITORS"),
    ("DIRECT_EXPENSES", "DIRECT EXPENSES"),
    ("INDIRECT_EXPENSES", "INDIRECT EXPENSES"),
    ("INVENTORY", "INVENTORY"),
    (
        "MAINTENANCE_EXPENSES_HUNTING_VEHICLES",
        "MAINTENANCE EXPENSES, HUNTING VEHICLES",
    ),
    ("INCOME_TAX", "INCOME TAX"),
    ("ACCOUNTS_RECEIVABLES", "ACCOUNTS RECEIVABLES"),
    ("PREPAID_EXPENSES", "PREPAID EXPENSES"),
    (
        "MAINTENANCE_EXPENSES_OTHER_VEHICLES_EQUIPMENT",
        "MAINTENANCE EXPENSES, OTHER VEHICLES & EQUIPMENT",
    ),
    ("PAYROLL_EXPENSES", "PAYROLL EXPENSES"),
    ("ADMINISTRATIVE_EXPENSES", "ADMINISTRATIVE EXPENSES"),
    ("ACCOUNTS_PAYABLE", "ACCOUNTS PAYABLE"),
)

COMPADNY_ACCOUNT_TYPE_CHOICES = (
    ("CASH_IN_HAND", "CASH IN HAND"),
    ("BANK", "BANK"),
    ("SALES_ACCOUNT", "Sales Account"),
    ("COST_OF_GOODS_SOLD", "Cost of Goods Sold"),
    ("STORE_ACCOUNT", "Store Account"),
    ("DISCOUNT_ALLOWED_ACCOUNT", "Discount Allowed Account"),
    ("STOCK_ADJUSTMENT_ACCOUNT", "Stock Adjustment Account"),
    ("ROUND_OFF_ACCOUNT", "Round Off Account"),
    ("DISCOUNT_RECEIVED_ACCOUNT", "Discount Received Account"),
    ("WRITE_OFF_ACCOUNT", "Write Off Account"),
    ("EMPLOYEE_ADVANCE_ACCOUNT", "Employee Advance Account"),
    ("DEFERRED_REVEUE_ACCOUNT", "Deferred Revenue Account"),
    ("DEFERRED_EXPENSE_ACCOUNT", "Deferred Expense Account"),
    ("STOCK_RECEIVED_BUT_NOT_BILLED", "Stock Received But Not Billed"),
    ("EXPENSES_INCLUDED_IN_VALUATION", "Expenses Included in Valuation"),
    ("VAT_ACCOUNT", "VAT Account"),
    ("DEBTOR_ACCOUNT", "Debtor Account"),
    ("CREDITOR_ACCOUNT", "Creditor Account"),
    ("TRANST_LOSS_ACCOUNT", "Transportation Loss Account"),
)


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "https://trophyfront.japango.co.tz",
    "https://accounts.japango.co.tz",
    "https://trophyapi.japango.co.tz",
    "http://localhost:3000",  # or whatever your frontend local URL is
]


CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
]
